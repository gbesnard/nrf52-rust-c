/* automatically generated by rust-bindgen 0.64.0 */

pub const SUCCESS_CODE: u32 = 42;
pub const CONTINUE_CODE: u32 = 0;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = cty::c_longlong;
pub type uintmax_t = cty::c_ulonglong;
pub const state_t_STATE_INIT: state_t = 0;
pub const state_t_STATE_STARTED: state_t = 1;
pub const state_t_STATE_STOPPED: state_t = 2;
pub type state_t = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct foo_struct_t {
    pub n: u32,
    pub state: state_t,
}
#[test]
fn bindgen_test_layout_foo_struct_t() {
    const UNINIT: ::core::mem::MaybeUninit<foo_struct_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<foo_struct_t>(),
        8usize,
        concat!("Size of: ", stringify!(foo_struct_t))
    );
    assert_eq!(
        ::core::mem::align_of::<foo_struct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(foo_struct_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(foo_struct_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(foo_struct_t),
            "::",
            stringify!(state)
        )
    );
}
extern "C" {
    pub fn rust_function_cb();
}
